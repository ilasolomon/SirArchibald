#usda 1.0
(
    defaultPrim = "__root"
    endTimeCode = 16
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 16
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "__root" (
    variants = {
        string paintjob = "yellow"
    }
    prepend variantSets = "paintjob"
)
{
    def Scope "mtl"
    {
        def Material "main_mtlx" (
            prepend inherits = </__class_mtl__/main_mtlx>
        )
        {
            def Shader "mtlxstandard_surface"
            {
                uniform token info:id = "ND_standard_surface_surfaceshader"
                float inputs:base (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 1
                            string ogl_diff_intensity = "1"
                        }
                    }
                )
                color3f inputs:base_color = (0.5, 0, 1) (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double3 default_value = (0.8, 0.8, 0.8)
                            string ogl_diff = "1"
                        }
                    }
                )
                color3f inputs:base_color.connect = </__root/mtl/main_mtlx/colorSwitch.outputs:out>
                float inputs:coat (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 0
                            string ogl_coat_intensity = "1"
                        }
                    }
                )
                float inputs:coat_roughness (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 0.1
                            string ogl_coat_rough = "1"
                        }
                    }
                )
                float inputs:emission (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 0
                            string ogl_emit_intensity = "1"
                        }
                    }
                )
                color3f inputs:emission_color (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double3 default_value = (1, 1, 1)
                            string ogl_emit = "1"
                        }
                    }
                )
                float inputs:metalness (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 0
                            string ogl_metallic = "1"
                        }
                    }
                )
                float inputs:metalness.connect = </__root/mtl/main_mtlx/metalness_tx.outputs:out>
                float inputs:specular (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 1
                            string ogl_spec_intensity = "1"
                        }
                    }
                )
                float inputs:specular_anisotropy.connect = </__root/mtl/main_mtlx/anisotropyAmount_tx.outputs:out>
                color3f inputs:specular_color (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double3 default_value = (1, 1, 1)
                            string ogl_spec = "1"
                        }
                    }
                )
                float inputs:specular_IOR (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 1.5
                            string ogl_ior = "1"
                        }
                    }
                )
                float inputs:specular_IOR.connect = </__root/mtl/main_mtlx/mtlxpower1.outputs:out>
                float inputs:specular_roughness (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 0.2
                            string ogl_rough = "1"
                        }
                    }
                )
                float inputs:specular_roughness.connect = </__root/mtl/main_mtlx/roughness_tx.outputs:out>
                float inputs:subsurface_anisotropy = 0.25
                float inputs:subsurface_scale = 0.05
                float inputs:transmission (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 0
                            string ogl_transparency = "1"
                        }
                    }
                )
            }

            def Shader "colorSwitch"
            {
                uniform token info:id = "ND_switch_color3"
                color3f inputs:in1.connect = </__root/mtl/main_mtlx/color_tx.outputs:out>
                color3f inputs:in2.connect = </__root/mtl/main_mtlx/colorGreen_tx.outputs:out>
                color3f inputs:in3.connect = </__root/mtl/main_mtlx/colorYellow_tx.outputs:out>
                color3f outputs:out
            }

            def Shader "color_tx"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default = (0, 1, 0)
                asset inputs:file = @../../Texturing/master/color_<UDIM>.exr@ (
                    colorSpace = "ACEScg"
                )
                color3f outputs:out
            }

            def Shader "colorGreen_tx"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default = (0, 1, 0)
                asset inputs:file = @../../Texturing_variant_green/v0003/color_<UDIM>.exr@ (
                    colorSpace = "ACEScg"
                )
                color3f outputs:out
            }

            def Shader "colorYellow_tx"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default = (0, 1, 0)
                asset inputs:file = @../../Texturing_variant_yellow/v0003/color_<UDIM>.exr@ (
                    colorSpace = "ACEScg"
                )
                color3f outputs:out
            }

            def Shader "metalness_tx"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @../../Texturing/master/metalness_<UDIM>.exr@ (
                    colorSpace = "Raw"
                )
                float outputs:out
            }

            def Shader "roughness_tx"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @../../Texturing/master/roughness_<UDIM>.exr@ (
                    colorSpace = "Raw"
                )
                float outputs:out
            }

            def Shader "mtlxpower1"
            {
                uniform token info:id = "ND_power_float"
                float inputs:in1.connect = </__root/mtl/main_mtlx/inverseIOR_tx.outputs:out>
                float inputs:in2 = -1
                float outputs:out
            }

            def Shader "inverseIOR_tx"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default = 0.666
                asset inputs:file = @../../Texturing/master/inverseIOR_<UDIM>.exr@ (
                    colorSpace = "Raw"
                )
                float outputs:out
            }

            def Shader "anisotropyAmount_tx"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @../../Texturing/master/anisotropyAmount_<UDIM>.exr@ (
                    colorSpace = "Raw"
                )
                float outputs:out
            }

            def Shader "anisotropyAngle_tx"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @../../Texturing/master/anisotropyAngle_<UDIM>.exr@ (
                    colorSpace = "Raw"
                )
            }

            def Shader "mtlxdisplacement"
            {
                uniform token info:id = "ND_displacement_float"
            }

            def Shader "mtlxadd2"
            {
                uniform token info:id = "ND_add_float"
            }

            def Shader "heightSwitch"
            {
                uniform token info:id = "ND_switch_float"
                float inputs:in1.connect = </__root/mtl/main_mtlx/height_tx.outputs:out>
            }

            def Shader "height_tx"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @../../Texturing/master/height_<UDIM>.exr@ (
                    colorSpace = "Raw"
                )
                float outputs:out
            }

            def Shader "heightGreen_tx"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @../../Texturing_variant_green/v0003/height_<UDIM>.exr@ (
                    colorSpace = "Raw"
                )
            }
        }

        def Material "usdpreview_blue" (
            prepend inherits = </__class_mtl__/usdpreview_blue>
        )
        {
            token outputs:surface.connect = </__root/mtl/usdpreview_blue/usdpreviewsurface.outputs:surface>

            def Shader "usdpreviewsurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </__root/mtl/usdpreview_blue/usduvtexture1.outputs:rgb>
                float inputs:metallic.connect = </__root/mtl/usdpreview_blue/usduvtexture2.outputs:r>
                float inputs:opacityThreshold = 1
                float inputs:roughness.connect = </__root/mtl/usdpreview_blue/usduvtexture3.outputs:r>
                token outputs:surface
            }

            def Shader "usduvtexture1"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @../../Texturing_preview/master/color_<UDIM>.png@
                float2 inputs:st.connect = </__root/mtl/usdpreview_blue/usdprimvarreader1.outputs:result>
                vector3f outputs:rgb
            }

            def Shader "usdprimvarreader1"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                string inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "usduvtexture2"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @../../Texturing_preview/master/metalness_<UDIM>.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </__root/mtl/usdpreview_blue/usdprimvarreader1.outputs:result>
                float outputs:r
            }

            def Shader "usduvtexture3"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @../../Texturing_preview/master/roughness_<UDIM>.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </__root/mtl/usdpreview_blue/usdprimvarreader1.outputs:result>
                float outputs:r
            }
        }

        def Material "usdpreview_green" (
            prepend inherits = </__class_mtl__/usdpreview_green>
        )
        {
            token outputs:surface.connect = </__root/mtl/usdpreview_green/usdpreviewsurface.outputs:surface>

            def Shader "usdpreviewsurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </__root/mtl/usdpreview_green/usduvtexture1.outputs:rgb>
                float inputs:metallic.connect = </__root/mtl/usdpreview_green/usduvtexture2.outputs:r>
                float inputs:opacityThreshold = 1
                float inputs:roughness.connect = </__root/mtl/usdpreview_green/usduvtexture3.outputs:r>
                token outputs:surface
            }

            def Shader "usduvtexture1"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @../../Texturing_green_preview/v0001/color_<UDIM>.png@
                float2 inputs:st.connect = </__root/mtl/usdpreview_green/usdprimvarreader1.outputs:result>
                vector3f outputs:rgb
            }

            def Shader "usdprimvarreader1"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                string inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "usduvtexture2"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @../../Texturing_preview/master/metalness_<UDIM>.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </__root/mtl/usdpreview_green/usdprimvarreader1.outputs:result>
                float outputs:r
            }

            def Shader "usduvtexture3"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @../../Texturing_preview/master/roughness_<UDIM>.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </__root/mtl/usdpreview_green/usdprimvarreader1.outputs:result>
                float outputs:r
            }
        }

        def Material "usdpreview_yellow" (
            prepend inherits = </__class_mtl__/usdpreview_yellow>
        )
        {
            token outputs:surface.connect = </__root/mtl/usdpreview_yellow/usdpreviewsurface.outputs:surface>

            def Shader "usdpreviewsurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </__root/mtl/usdpreview_yellow/usduvtexture1.outputs:rgb>
                float inputs:metallic.connect = </__root/mtl/usdpreview_yellow/usduvtexture2.outputs:r>
                float inputs:opacityThreshold = 1
                float inputs:roughness.connect = </__root/mtl/usdpreview_yellow/usduvtexture3.outputs:r>
                token outputs:surface
            }

            def Shader "usduvtexture1"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @../../Texturing_yellow_preview/v0001/color_<UDIM>.png@
                float2 inputs:st.connect = </__root/mtl/usdpreview_yellow/usdprimvarreader1.outputs:result>
                vector3f outputs:rgb
            }

            def Shader "usdprimvarreader1"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                string inputs:varname = "st"
                float2 outputs:result
            }

            def Shader "usduvtexture2"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @../../Texturing_preview/master/metalness_<UDIM>.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </__root/mtl/usdpreview_yellow/usdprimvarreader1.outputs:result>
                float outputs:r
            }

            def Shader "usduvtexture3"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @../../Texturing_preview/master/roughness_<UDIM>.png@
                token inputs:sourceColorSpace = "raw"
                float2 inputs:st.connect = </__root/mtl/usdpreview_yellow/usdprimvarreader1.outputs:result>
                float outputs:r
            }
        }
    }

    over "geo" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding:full = </__root/mtl/main_mtlx>
    }
    variantSet "paintjob" = {
        "blue" {
            def Scope "mtl"
            {
                def Material "main_mtlx" (
                    prepend inherits = </__class_mtl__/main_mtlx>
                )
                {
                    def Shader "mtlxstandard_surface"
                    {
                        uniform token info:id = "ND_standard_surface_surfaceshader"
                        float inputs:base (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 1
                                    string ogl_diff_intensity = "1"
                                }
                            }
                        )
                        color3f inputs:base_color = (0.5, 0, 1) (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double3 default_value = (0.8, 0.8, 0.8)
                                    string ogl_diff = "1"
                                }
                            }
                        )
                        color3f inputs:base_color.connect = </__root/mtl/main_mtlx/colorSwitch.outputs:out>
                        float inputs:coat (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0
                                    string ogl_coat_intensity = "1"
                                }
                            }
                        )
                        float inputs:coat_roughness (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0.1
                                    string ogl_coat_rough = "1"
                                }
                            }
                        )
                        float inputs:emission (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0
                                    string ogl_emit_intensity = "1"
                                }
                            }
                        )
                        color3f inputs:emission_color (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double3 default_value = (1, 1, 1)
                                    string ogl_emit = "1"
                                }
                            }
                        )
                        float inputs:metalness (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0
                                    string ogl_metallic = "1"
                                }
                            }
                        )
                        float inputs:metalness.connect = </__root/mtl/main_mtlx/metalness_tx.outputs:out>
                        float inputs:specular (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 1
                                    string ogl_spec_intensity = "1"
                                }
                            }
                        )
                        float inputs:specular_anisotropy.connect = </__root/mtl/main_mtlx/anisotropyAmount_tx.outputs:out>
                        color3f inputs:specular_color (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double3 default_value = (1, 1, 1)
                                    string ogl_spec = "1"
                                }
                            }
                        )
                        float inputs:specular_IOR (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 1.5
                                    string ogl_ior = "1"
                                }
                            }
                        )
                        float inputs:specular_IOR.connect = </__root/mtl/main_mtlx/mtlxpower1.outputs:out>
                        float inputs:specular_roughness (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0.2
                                    string ogl_rough = "1"
                                }
                            }
                        )
                        float inputs:specular_roughness.connect = </__root/mtl/main_mtlx/roughness_tx.outputs:out>
                        float inputs:subsurface_anisotropy = 0.25
                        float inputs:subsurface_scale = 0.05
                        float inputs:transmission (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0
                                    string ogl_transparency = "1"
                                }
                            }
                        )
                    }

                    def Shader "colorSwitch"
                    {
                        uniform token info:id = "ND_switch_color3"
                        color3f inputs:in1.connect = </__root/mtl/main_mtlx/color_tx.outputs:out>
                        color3f inputs:in2.connect = </__root/mtl/main_mtlx/colorGreen_tx.outputs:out>
                        color3f inputs:in3.connect = </__root/mtl/main_mtlx/colorYellow_tx.outputs:out>
                        custom float inputs:which = 0
                        color3f outputs:out
                    }

                    def Shader "color_tx"
                    {
                        uniform token info:id = "ND_image_color3"
                        color3f inputs:default = (0, 1, 0)
                        asset inputs:file = @../../Texturing/master/color_<UDIM>.exr@ (
                            colorSpace = "ACEScg"
                        )
                        color3f outputs:out
                    }

                    def Shader "colorGreen_tx"
                    {
                        uniform token info:id = "ND_image_color3"
                        color3f inputs:default = (0, 1, 0)
                        asset inputs:file = @../../Texturing_variant_green/v0003/color_<UDIM>.exr@ (
                            colorSpace = "ACEScg"
                        )
                        color3f outputs:out
                    }

                    def Shader "colorYellow_tx"
                    {
                        uniform token info:id = "ND_image_color3"
                        color3f inputs:default = (0, 1, 0)
                        asset inputs:file = @../../Texturing_variant_yellow/v0003/color_<UDIM>.exr@ (
                            colorSpace = "ACEScg"
                        )
                        color3f outputs:out
                    }

                    def Shader "metalness_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/metalness_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "roughness_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/roughness_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "mtlxpower1"
                    {
                        uniform token info:id = "ND_power_float"
                        float inputs:in1.connect = </__root/mtl/main_mtlx/inverseIOR_tx.outputs:out>
                        float inputs:in2 = -1
                        float outputs:out
                    }

                    def Shader "inverseIOR_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        float inputs:default = 0.666
                        asset inputs:file = @../../Texturing/master/inverseIOR_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "anisotropyAmount_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/anisotropyAmount_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "anisotropyAngle_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/anisotropyAngle_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                    }

                    def Shader "mtlxdisplacement"
                    {
                        uniform token info:id = "ND_displacement_float"
                    }

                    def Shader "mtlxadd2"
                    {
                        uniform token info:id = "ND_add_float"
                    }

                    def Shader "heightSwitch"
                    {
                        uniform token info:id = "ND_switch_float"
                        float inputs:in1.connect = </__root/mtl/main_mtlx/height_tx.outputs:out>
                        custom float inputs:which = 0
                    }

                    def Shader "height_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/height_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "heightGreen_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing_variant_green/v0003/height_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                    }
                }

                def Material "usdpreview_blue" (
                    prepend inherits = </__class_mtl__/usdpreview_blue>
                )
                {
                    token outputs:surface.connect = </__root/mtl/usdpreview_blue/usdpreviewsurface.outputs:surface>

                    def Shader "usdpreviewsurface"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor.connect = </__root/mtl/usdpreview_blue/usduvtexture1.outputs:rgb>
                        float inputs:metallic.connect = </__root/mtl/usdpreview_blue/usduvtexture2.outputs:r>
                        float inputs:opacityThreshold = 1
                        float inputs:roughness.connect = </__root/mtl/usdpreview_blue/usduvtexture3.outputs:r>
                        token outputs:surface
                    }

                    def Shader "usduvtexture1"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/color_<UDIM>.png@
                        float2 inputs:st.connect = </__root/mtl/usdpreview_blue/usdprimvarreader1.outputs:result>
                        vector3f outputs:rgb
                    }

                    def Shader "usdprimvarreader1"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        string inputs:varname = "st"
                        float2 outputs:result
                    }

                    def Shader "usduvtexture2"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/metalness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_blue/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }

                    def Shader "usduvtexture3"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/roughness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_blue/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }
                }

                def Material "usdpreview_green" (
                    prepend inherits = </__class_mtl__/usdpreview_green>
                )
                {
                    token outputs:surface.connect = </__root/mtl/usdpreview_green/usdpreviewsurface.outputs:surface>

                    def Shader "usdpreviewsurface"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor.connect = </__root/mtl/usdpreview_green/usduvtexture1.outputs:rgb>
                        float inputs:metallic.connect = </__root/mtl/usdpreview_green/usduvtexture2.outputs:r>
                        float inputs:opacityThreshold = 1
                        float inputs:roughness.connect = </__root/mtl/usdpreview_green/usduvtexture3.outputs:r>
                        token outputs:surface
                    }

                    def Shader "usduvtexture1"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_green_preview/v0001/color_<UDIM>.png@
                        float2 inputs:st.connect = </__root/mtl/usdpreview_green/usdprimvarreader1.outputs:result>
                        vector3f outputs:rgb
                    }

                    def Shader "usdprimvarreader1"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        string inputs:varname = "st"
                        float2 outputs:result
                    }

                    def Shader "usduvtexture2"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/metalness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_green/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }

                    def Shader "usduvtexture3"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/roughness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_green/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }
                }

                def Material "usdpreview_yellow" (
                    prepend inherits = </__class_mtl__/usdpreview_yellow>
                )
                {
                    token outputs:surface.connect = </__root/mtl/usdpreview_yellow/usdpreviewsurface.outputs:surface>

                    def Shader "usdpreviewsurface"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor.connect = </__root/mtl/usdpreview_yellow/usduvtexture1.outputs:rgb>
                        float inputs:metallic.connect = </__root/mtl/usdpreview_yellow/usduvtexture2.outputs:r>
                        float inputs:opacityThreshold = 1
                        float inputs:roughness.connect = </__root/mtl/usdpreview_yellow/usduvtexture3.outputs:r>
                        token outputs:surface
                    }

                    def Shader "usduvtexture1"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_yellow_preview/v0001/color_<UDIM>.png@
                        float2 inputs:st.connect = </__root/mtl/usdpreview_yellow/usdprimvarreader1.outputs:result>
                        vector3f outputs:rgb
                    }

                    def Shader "usdprimvarreader1"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        string inputs:varname = "st"
                        float2 outputs:result
                    }

                    def Shader "usduvtexture2"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/metalness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_yellow/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }

                    def Shader "usduvtexture3"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/roughness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_yellow/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }
                }
            }

            over "geo" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding:full = </__root/mtl/main_mtlx>
                rel material:binding:preview = </__root/mtl/usdpreview_blue>
            }

        }
        "green" {
            def Scope "mtl"
            {
                def Material "main_mtlx" (
                    prepend inherits = </__class_mtl__/main_mtlx>
                )
                {
                    def Shader "mtlxstandard_surface"
                    {
                        uniform token info:id = "ND_standard_surface_surfaceshader"
                        float inputs:base (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 1
                                    string ogl_diff_intensity = "1"
                                }
                            }
                        )
                        color3f inputs:base_color = (0.5, 0, 1) (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double3 default_value = (0.8, 0.8, 0.8)
                                    string ogl_diff = "1"
                                }
                            }
                        )
                        color3f inputs:base_color.connect = </__root/mtl/main_mtlx/colorSwitch.outputs:out>
                        float inputs:coat (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0
                                    string ogl_coat_intensity = "1"
                                }
                            }
                        )
                        float inputs:coat_roughness (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0.1
                                    string ogl_coat_rough = "1"
                                }
                            }
                        )
                        float inputs:emission (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0
                                    string ogl_emit_intensity = "1"
                                }
                            }
                        )
                        color3f inputs:emission_color (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double3 default_value = (1, 1, 1)
                                    string ogl_emit = "1"
                                }
                            }
                        )
                        float inputs:metalness (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0
                                    string ogl_metallic = "1"
                                }
                            }
                        )
                        float inputs:metalness.connect = </__root/mtl/main_mtlx/metalness_tx.outputs:out>
                        float inputs:specular (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 1
                                    string ogl_spec_intensity = "1"
                                }
                            }
                        )
                        float inputs:specular_anisotropy.connect = </__root/mtl/main_mtlx/anisotropyAmount_tx.outputs:out>
                        color3f inputs:specular_color (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double3 default_value = (1, 1, 1)
                                    string ogl_spec = "1"
                                }
                            }
                        )
                        float inputs:specular_IOR (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 1.5
                                    string ogl_ior = "1"
                                }
                            }
                        )
                        float inputs:specular_IOR.connect = </__root/mtl/main_mtlx/mtlxpower1.outputs:out>
                        float inputs:specular_roughness (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0.2
                                    string ogl_rough = "1"
                                }
                            }
                        )
                        float inputs:specular_roughness.connect = </__root/mtl/main_mtlx/roughness_tx.outputs:out>
                        float inputs:subsurface_anisotropy = 0.25
                        float inputs:subsurface_scale = 0.05
                        float inputs:transmission (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0
                                    string ogl_transparency = "1"
                                }
                            }
                        )
                    }

                    def Shader "colorSwitch"
                    {
                        uniform token info:id = "ND_switch_color3"
                        color3f inputs:in1.connect = </__root/mtl/main_mtlx/color_tx.outputs:out>
                        color3f inputs:in2.connect = </__root/mtl/main_mtlx/colorGreen_tx.outputs:out>
                        color3f inputs:in3.connect = </__root/mtl/main_mtlx/colorYellow_tx.outputs:out>
                        custom float inputs:which = 1
                        color3f outputs:out
                    }

                    def Shader "color_tx"
                    {
                        uniform token info:id = "ND_image_color3"
                        color3f inputs:default = (0, 1, 0)
                        asset inputs:file = @../../Texturing/master/color_<UDIM>.exr@ (
                            colorSpace = "ACEScg"
                        )
                        color3f outputs:out
                    }

                    def Shader "colorGreen_tx"
                    {
                        uniform token info:id = "ND_image_color3"
                        color3f inputs:default = (0, 1, 0)
                        asset inputs:file = @../../Texturing_variant_green/v0003/color_<UDIM>.exr@ (
                            colorSpace = "ACEScg"
                        )
                        color3f outputs:out
                    }

                    def Shader "colorYellow_tx"
                    {
                        uniform token info:id = "ND_image_color3"
                        color3f inputs:default = (0, 1, 0)
                        asset inputs:file = @../../Texturing_variant_yellow/v0003/color_<UDIM>.exr@ (
                            colorSpace = "ACEScg"
                        )
                        color3f outputs:out
                    }

                    def Shader "metalness_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/metalness_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "roughness_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/roughness_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "mtlxpower1"
                    {
                        uniform token info:id = "ND_power_float"
                        float inputs:in1.connect = </__root/mtl/main_mtlx/inverseIOR_tx.outputs:out>
                        float inputs:in2 = -1
                        float outputs:out
                    }

                    def Shader "inverseIOR_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        float inputs:default = 0.666
                        asset inputs:file = @../../Texturing/master/inverseIOR_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "anisotropyAmount_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/anisotropyAmount_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "anisotropyAngle_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/anisotropyAngle_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                    }

                    def Shader "mtlxdisplacement"
                    {
                        uniform token info:id = "ND_displacement_float"
                    }

                    def Shader "mtlxadd2"
                    {
                        uniform token info:id = "ND_add_float"
                    }

                    def Shader "heightSwitch"
                    {
                        uniform token info:id = "ND_switch_float"
                        float inputs:in1.connect = </__root/mtl/main_mtlx/height_tx.outputs:out>
                        custom float inputs:which = 1
                    }

                    def Shader "height_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/height_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "heightGreen_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing_variant_green/v0003/height_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                    }
                }

                def Material "usdpreview_blue" (
                    prepend inherits = </__class_mtl__/usdpreview_blue>
                )
                {
                    token outputs:surface.connect = </__root/mtl/usdpreview_blue/usdpreviewsurface.outputs:surface>

                    def Shader "usdpreviewsurface"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor.connect = </__root/mtl/usdpreview_blue/usduvtexture1.outputs:rgb>
                        float inputs:metallic.connect = </__root/mtl/usdpreview_blue/usduvtexture2.outputs:r>
                        float inputs:opacityThreshold = 1
                        float inputs:roughness.connect = </__root/mtl/usdpreview_blue/usduvtexture3.outputs:r>
                        token outputs:surface
                    }

                    def Shader "usduvtexture1"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/color_<UDIM>.png@
                        float2 inputs:st.connect = </__root/mtl/usdpreview_blue/usdprimvarreader1.outputs:result>
                        vector3f outputs:rgb
                    }

                    def Shader "usdprimvarreader1"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        string inputs:varname = "st"
                        float2 outputs:result
                    }

                    def Shader "usduvtexture2"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/metalness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_blue/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }

                    def Shader "usduvtexture3"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/roughness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_blue/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }
                }

                def Material "usdpreview_green" (
                    prepend inherits = </__class_mtl__/usdpreview_green>
                )
                {
                    token outputs:surface.connect = </__root/mtl/usdpreview_green/usdpreviewsurface.outputs:surface>

                    def Shader "usdpreviewsurface"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor.connect = </__root/mtl/usdpreview_green/usduvtexture1.outputs:rgb>
                        float inputs:metallic.connect = </__root/mtl/usdpreview_green/usduvtexture2.outputs:r>
                        float inputs:opacityThreshold = 1
                        float inputs:roughness.connect = </__root/mtl/usdpreview_green/usduvtexture3.outputs:r>
                        token outputs:surface
                    }

                    def Shader "usduvtexture1"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_green_preview/v0001/color_<UDIM>.png@
                        float2 inputs:st.connect = </__root/mtl/usdpreview_green/usdprimvarreader1.outputs:result>
                        vector3f outputs:rgb
                    }

                    def Shader "usdprimvarreader1"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        string inputs:varname = "st"
                        float2 outputs:result
                    }

                    def Shader "usduvtexture2"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/metalness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_green/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }

                    def Shader "usduvtexture3"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/roughness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_green/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }
                }

                def Material "usdpreview_yellow" (
                    prepend inherits = </__class_mtl__/usdpreview_yellow>
                )
                {
                    token outputs:surface.connect = </__root/mtl/usdpreview_yellow/usdpreviewsurface.outputs:surface>

                    def Shader "usdpreviewsurface"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor.connect = </__root/mtl/usdpreview_yellow/usduvtexture1.outputs:rgb>
                        float inputs:metallic.connect = </__root/mtl/usdpreview_yellow/usduvtexture2.outputs:r>
                        float inputs:opacityThreshold = 1
                        float inputs:roughness.connect = </__root/mtl/usdpreview_yellow/usduvtexture3.outputs:r>
                        token outputs:surface
                    }

                    def Shader "usduvtexture1"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_yellow_preview/v0001/color_<UDIM>.png@
                        float2 inputs:st.connect = </__root/mtl/usdpreview_yellow/usdprimvarreader1.outputs:result>
                        vector3f outputs:rgb
                    }

                    def Shader "usdprimvarreader1"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        string inputs:varname = "st"
                        float2 outputs:result
                    }

                    def Shader "usduvtexture2"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/metalness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_yellow/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }

                    def Shader "usduvtexture3"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/roughness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_yellow/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }
                }
            }

            over "geo" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding:full = </__root/mtl/main_mtlx>
                rel material:binding:preview = </__root/mtl/usdpreview_green>
            }

        }
        "yellow" {
            def Scope "mtl"
            {
                def Material "main_mtlx" (
                    prepend inherits = </__class_mtl__/main_mtlx>
                )
                {
                    def Shader "mtlxstandard_surface"
                    {
                        uniform token info:id = "ND_standard_surface_surfaceshader"
                        float inputs:base (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 1
                                    string ogl_diff_intensity = "1"
                                }
                            }
                        )
                        color3f inputs:base_color = (0.5, 0, 1) (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double3 default_value = (0.8, 0.8, 0.8)
                                    string ogl_diff = "1"
                                }
                            }
                        )
                        color3f inputs:base_color.connect = </__root/mtl/main_mtlx/colorSwitch.outputs:out>
                        float inputs:coat (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0
                                    string ogl_coat_intensity = "1"
                                }
                            }
                        )
                        float inputs:coat_roughness (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0.1
                                    string ogl_coat_rough = "1"
                                }
                            }
                        )
                        float inputs:emission (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0
                                    string ogl_emit_intensity = "1"
                                }
                            }
                        )
                        color3f inputs:emission_color (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double3 default_value = (1, 1, 1)
                                    string ogl_emit = "1"
                                }
                            }
                        )
                        float inputs:metalness (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0
                                    string ogl_metallic = "1"
                                }
                            }
                        )
                        float inputs:metalness.connect = </__root/mtl/main_mtlx/metalness_tx.outputs:out>
                        float inputs:specular (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 1
                                    string ogl_spec_intensity = "1"
                                }
                            }
                        )
                        float inputs:specular_anisotropy.connect = </__root/mtl/main_mtlx/anisotropyAmount_tx.outputs:out>
                        color3f inputs:specular_color (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double3 default_value = (1, 1, 1)
                                    string ogl_spec = "1"
                                }
                            }
                        )
                        float inputs:specular_IOR (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 1.5
                                    string ogl_ior = "1"
                                }
                            }
                        )
                        float inputs:specular_IOR.connect = </__root/mtl/main_mtlx/mtlxpower1.outputs:out>
                        float inputs:specular_roughness (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0.2
                                    string ogl_rough = "1"
                                }
                            }
                        )
                        float inputs:specular_roughness.connect = </__root/mtl/main_mtlx/roughness_tx.outputs:out>
                        float inputs:subsurface_anisotropy = 0.25
                        float inputs:subsurface_scale = 0.05
                        float inputs:transmission (
                            customData = {
                                dictionary HoudiniPreviewTags = {
                                    double default_value = 0
                                    string ogl_transparency = "1"
                                }
                            }
                        )
                    }

                    def Shader "colorSwitch"
                    {
                        uniform token info:id = "ND_switch_color3"
                        color3f inputs:in1.connect = </__root/mtl/main_mtlx/color_tx.outputs:out>
                        color3f inputs:in2.connect = </__root/mtl/main_mtlx/colorGreen_tx.outputs:out>
                        color3f inputs:in3.connect = </__root/mtl/main_mtlx/colorYellow_tx.outputs:out>
                        custom float inputs:which = 2
                        color3f outputs:out
                    }

                    def Shader "color_tx"
                    {
                        uniform token info:id = "ND_image_color3"
                        color3f inputs:default = (0, 1, 0)
                        asset inputs:file = @../../Texturing/master/color_<UDIM>.exr@ (
                            colorSpace = "ACEScg"
                        )
                        color3f outputs:out
                    }

                    def Shader "colorGreen_tx"
                    {
                        uniform token info:id = "ND_image_color3"
                        color3f inputs:default = (0, 1, 0)
                        asset inputs:file = @../../Texturing_variant_green/v0003/color_<UDIM>.exr@ (
                            colorSpace = "ACEScg"
                        )
                        color3f outputs:out
                    }

                    def Shader "colorYellow_tx"
                    {
                        uniform token info:id = "ND_image_color3"
                        color3f inputs:default = (0, 1, 0)
                        asset inputs:file = @../../Texturing_variant_yellow/v0003/color_<UDIM>.exr@ (
                            colorSpace = "ACEScg"
                        )
                        color3f outputs:out
                    }

                    def Shader "metalness_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/metalness_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "roughness_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/roughness_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "mtlxpower1"
                    {
                        uniform token info:id = "ND_power_float"
                        float inputs:in1.connect = </__root/mtl/main_mtlx/inverseIOR_tx.outputs:out>
                        float inputs:in2 = -1
                        float outputs:out
                    }

                    def Shader "inverseIOR_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        float inputs:default = 0.666
                        asset inputs:file = @../../Texturing/master/inverseIOR_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "anisotropyAmount_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/anisotropyAmount_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "anisotropyAngle_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/anisotropyAngle_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                    }

                    def Shader "mtlxdisplacement"
                    {
                        uniform token info:id = "ND_displacement_float"
                    }

                    def Shader "mtlxadd2"
                    {
                        uniform token info:id = "ND_add_float"
                    }

                    def Shader "heightSwitch"
                    {
                        uniform token info:id = "ND_switch_float"
                        float inputs:in1.connect = </__root/mtl/main_mtlx/height_tx.outputs:out>
                        custom float inputs:which = 0
                    }

                    def Shader "height_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing/master/height_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                        float outputs:out
                    }

                    def Shader "heightGreen_tx"
                    {
                        uniform token info:id = "ND_image_float"
                        asset inputs:file = @../../Texturing_variant_green/v0003/height_<UDIM>.exr@ (
                            colorSpace = "Raw"
                        )
                    }
                }

                def Material "usdpreview_blue" (
                    prepend inherits = </__class_mtl__/usdpreview_blue>
                )
                {
                    token outputs:surface.connect = </__root/mtl/usdpreview_blue/usdpreviewsurface.outputs:surface>

                    def Shader "usdpreviewsurface"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor.connect = </__root/mtl/usdpreview_blue/usduvtexture1.outputs:rgb>
                        float inputs:metallic.connect = </__root/mtl/usdpreview_blue/usduvtexture2.outputs:r>
                        float inputs:opacityThreshold = 1
                        float inputs:roughness.connect = </__root/mtl/usdpreview_blue/usduvtexture3.outputs:r>
                        token outputs:surface
                    }

                    def Shader "usduvtexture1"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/color_<UDIM>.png@
                        float2 inputs:st.connect = </__root/mtl/usdpreview_blue/usdprimvarreader1.outputs:result>
                        vector3f outputs:rgb
                    }

                    def Shader "usdprimvarreader1"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        string inputs:varname = "st"
                        float2 outputs:result
                    }

                    def Shader "usduvtexture2"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/metalness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_blue/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }

                    def Shader "usduvtexture3"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/roughness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_blue/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }
                }

                def Material "usdpreview_green" (
                    prepend inherits = </__class_mtl__/usdpreview_green>
                )
                {
                    token outputs:surface.connect = </__root/mtl/usdpreview_green/usdpreviewsurface.outputs:surface>

                    def Shader "usdpreviewsurface"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor.connect = </__root/mtl/usdpreview_green/usduvtexture1.outputs:rgb>
                        float inputs:metallic.connect = </__root/mtl/usdpreview_green/usduvtexture2.outputs:r>
                        float inputs:opacityThreshold = 1
                        float inputs:roughness.connect = </__root/mtl/usdpreview_green/usduvtexture3.outputs:r>
                        token outputs:surface
                    }

                    def Shader "usduvtexture1"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_green_preview/v0001/color_<UDIM>.png@
                        float2 inputs:st.connect = </__root/mtl/usdpreview_green/usdprimvarreader1.outputs:result>
                        vector3f outputs:rgb
                    }

                    def Shader "usdprimvarreader1"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        string inputs:varname = "st"
                        float2 outputs:result
                    }

                    def Shader "usduvtexture2"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/metalness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_green/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }

                    def Shader "usduvtexture3"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/roughness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_green/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }
                }

                def Material "usdpreview_yellow" (
                    prepend inherits = </__class_mtl__/usdpreview_yellow>
                )
                {
                    token outputs:surface.connect = </__root/mtl/usdpreview_yellow/usdpreviewsurface.outputs:surface>

                    def Shader "usdpreviewsurface"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor.connect = </__root/mtl/usdpreview_yellow/usduvtexture1.outputs:rgb>
                        float inputs:metallic.connect = </__root/mtl/usdpreview_yellow/usduvtexture2.outputs:r>
                        float inputs:opacityThreshold = 1
                        float inputs:roughness.connect = </__root/mtl/usdpreview_yellow/usduvtexture3.outputs:r>
                        token outputs:surface
                    }

                    def Shader "usduvtexture1"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_yellow_preview/v0001/color_<UDIM>.png@
                        float2 inputs:st.connect = </__root/mtl/usdpreview_yellow/usdprimvarreader1.outputs:result>
                        vector3f outputs:rgb
                    }

                    def Shader "usdprimvarreader1"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        string inputs:varname = "st"
                        float2 outputs:result
                    }

                    def Shader "usduvtexture2"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/metalness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_yellow/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }

                    def Shader "usduvtexture3"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @../../Texturing_preview/master/roughness_<UDIM>.png@
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </__root/mtl/usdpreview_yellow/usdprimvarreader1.outputs:result>
                        float outputs:r
                    }
                }
            }

            over "geo" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding:full = </__root/mtl/main_mtlx>
                rel material:binding:preview = </__root/mtl/usdpreview_yellow>
            }

        }
    }
}

