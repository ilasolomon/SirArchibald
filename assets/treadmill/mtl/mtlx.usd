#usda 1.0
(
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 0.01
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

over "treadmill"
{
    def Scope "mtl"
    {
        def Material "checker_mtlx" (
            prepend inherits = </__class_mtl__/checker_mtlx>
        )
        {
            token outputs:mtlx:displacement.connect = </treadmill/mtl/checker_mtlx/mtlxdisplacement.outputs:out>
            token outputs:mtlx:surface.connect = </treadmill/mtl/checker_mtlx/mtlxstandard_surface.outputs:out>
            token outputs:surface.connect = </treadmill/mtl/checker_mtlx/mtlxstandard_preview.outputs:surface>

            def Shader "mtlxstandard_surface"
            {
                uniform token info:id = "ND_standard_surface_surfaceshader"
                float inputs:base (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 1
                            string ogl_diff_intensity = "1"
                        }
                    }
                )
                color3f inputs:base_color (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double3 default_value = (0.8, 0.8, 0.8)
                            string ogl_diff = "1"
                        }
                    }
                )
                color3f inputs:base_color.connect = </treadmill/mtl/checker_mtlx/mtlxcheckerboard1.outputs:out>
                float inputs:coat (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 0
                            string ogl_coat_intensity = "1"
                        }
                    }
                )
                float inputs:coat_roughness (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 0.1
                            string ogl_coat_rough = "1"
                        }
                    }
                )
                float inputs:emission (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 0
                            string ogl_emit_intensity = "1"
                        }
                    }
                )
                color3f inputs:emission_color (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double3 default_value = (1, 1, 1)
                            string ogl_emit = "1"
                        }
                    }
                )
                float inputs:metalness (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 0
                            string ogl_metallic = "1"
                        }
                    }
                )
                float inputs:specular (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 1
                            string ogl_spec_intensity = "1"
                        }
                    }
                )
                color3f inputs:specular_color (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double3 default_value = (1, 1, 1)
                            string ogl_spec = "1"
                        }
                    }
                )
                float inputs:specular_IOR = 1.3 (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 1.5
                            string ogl_ior = "1"
                        }
                    }
                )
                float inputs:specular_roughness = 0.6 (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 0.2
                            string ogl_rough = "1"
                        }
                    }
                )
                float inputs:transmission (
                    customData = {
                        dictionary HoudiniPreviewTags = {
                            double default_value = 0
                            string ogl_transparency = "1"
                        }
                    }
                )
                token outputs:out
            }

            def Shader "mtlxcheckerboard1"
            {
                uniform token info:id = "ND_checkerboard_color3"
                color3f inputs:color1 = (0.2, 0.2, 0.2)
                color3f inputs:color2 = (0.1, 0.1, 0.1)
                float2 inputs:texcoord.connect = </treadmill/mtl/checker_mtlx/mtlxtexcoord1.outputs:out>
                float2 inputs:uvtiling = (16, 16)
                color3f outputs:out
            }

            def Shader "mtlxtexcoord1"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
            }

            def Shader "mtlxdisplacement"
            {
                uniform token info:id = "ND_displacement_float"
                token outputs:out
            }

            def Shader "mtlxstandard_preview" (
                customData = {
                    bool HoudiniIsAutoCreatedShader = 1
                }
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoatRoughness = 0.1
                color3f inputs:diffuseColor = (0.8, 0.8, 0.8)
                float inputs:ior = 1.3
                float inputs:roughness = 0.6
                color3f inputs:specularColor = (1, 1, 1)
                token outputs:surface
            }
        }
    }

    over "geo"
    {
        over "belt" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </treadmill/mtl/checker_mtlx>
        }
    }
}

